<div class='list-tab'>
                <div class='list-edit-icon tab-icon'>
                  <img class= 'list-edit-tab-img tab-img' src="${pen}"/>
                  <p class='list-remove-tab-text'> Edit task </p>
                </div>

                 <div class='list-remove-icon tab-icon'>
                  <img class= 'list-remove-tab-img tab-img' src="${trash}"/> <p class='list-remove-tab-text'> Remove task </p>
                  </div>
                 </div>



const editTask = (element, fullItem) => {
  element.style.display = "none";
  // get the text of the list item
  const liInnerText = element.innerText;

  element.insertAdjacentHTML("afterend", gitTextareaMarkup(liInnerText));

  const taskTextarea = document.querySelector(".task-textarea");
  const taskTextareaAll = document.querySelector(".text-task-add");
  const tagCancel = document.querySelector(".cancel-tag-btn");
  const tagAdd = document.querySelector(".add-tag-btn");

  taskTextarea.focus();
  // move cursor to the end of the word
  taskTextarea.setSelectionRange(
    taskTextarea.value.length,
    taskTextarea.value.length
  );

  // adding text area text to a new task item when pressing enter

  tagCancel.addEventListener("mousedown", (e) => {
    e.preventDefault();
    taskTextareaAll.remove();
    updateSort();
    element.style.display = "block";
  });

  tagAdd.addEventListener("mousedown", () => {
    const textValue = taskTextarea.value;

    // only adding new task item if the textarea box containes text
    if (textValue) {
      taskTextareaAll.insertAdjacentHTML("afterend", gitTaskMarkup(textValue));
      element.remove();
      taskTextareaAll.remove();
    }
    if (!textValue) {
      fullItem.remove();
    }
    updateStorage();
  });

  taskTextarea.addEventListener("keypress", (e) => {
    if (e.key === "Enter") {
      const textValue = taskTextarea.value;

      // only adding new task item if the textarea box containes text
      if (textValue) {
        taskTextareaAll.insertAdjacentHTML(
          "afterend",
          gitTaskMarkup(textValue)
        );
        element.remove();
        taskTextareaAll.remove();
      }
      if (!textValue) {
        fullItem.remove();
      }
      updateStorage();
      updateSort();
    }
  });
  window.addEventListener(
    "mousedown",
    (e) => {
      if (e.target != tagCancel) {
        taskTextarea.addEventListener("blur", (e) => {
          const textValue = taskTextarea.value;

          // only adding new task item if the textarea box containes text
          if (textValue) {
            taskTextareaAll.insertAdjacentHTML(
              "afterend",
              gitTaskMarkup(textValue)
            );
            element.remove();
            taskTextareaAll.remove();
          }
          if (!textValue) {
            fullItem.remove();
          }
          updateStorage();
        });
      }
    },
    { once: true }
  );
};
